{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error-handler.service\";\nexport const TASKS_KEY_NAME = 'tasks';\nexport class TasksService {\n  constructor(_httpClient,\n  //   private _router: Router,\n  _httpErrorHandler) {\n    this._httpClient = _httpClient;\n    this._httpErrorHandler = _httpErrorHandler;\n    this.API_URL = environment.backend + '/' + environment.services.tasks;\n  }\n  setTasks(newTask) {\n    // const tasks = this.getTasks();\n    localStorage.setItem(TASKS_KEY_NAME, \"tasks\");\n  }\n  removeAuthAccessToken() {\n    localStorage.removeItem(TASKS_KEY_NAME);\n  }\n  getToken() {\n    return localStorage.getItem(TASKS_KEY_NAME);\n  }\n  validateTokenTime() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const now = new Date().getTime() / 1000;\n    return tokenData.exp > now;\n  }\n  // getTasks(token: string): Observable<AuthResponse | ApiResponse> {\n  //     return this._httpClient.get<AuthResponse>(this.API_URL, {\n  //         headers: {\n  //             Authorization: `Bearer ${token}`,\n  //         },\n  //     }).pipe(\n  //         tap(this.setAuthAccessToken),\n  //         catchError(\n  //             error => this._httpErrorHandler.handleErrorHttpRequest(error)\n  //         )\n  //     );\n  //     return this._httpClient.get<AuthResponse>(this.API_URL)\n  //         .pipe(\n  //             tap(this.setAuthAccessToken),\n  //             catchError(\n  //                 error => this._httpErrorHandler.handleErrorHttpRequest(error)\n  //             )\n  //         );\n  // }\n  createTask(task, token) {\n    console.log(task);\n    console.log(token);\n    return this._httpClient.post(this.API_URL, task, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).pipe(tap(this.setTasks), catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  static {\n    this.ɵfac = function TasksService_Factory(t) {\n      return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TasksService,\n      factory: TasksService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","tap","environment","TASKS_KEY_NAME","TasksService","constructor","_httpClient","_httpErrorHandler","API_URL","backend","services","tasks","setTasks","newTask","localStorage","setItem","removeAuthAccessToken","removeItem","getToken","getItem","validateTokenTime","token","tokenData","JSON","parse","atob","split","now","Date","getTime","exp","createTask","task","console","log","post","headers","Authorization","pipe","error","handleErrorHttpRequest","i0","ɵɵinject","i1","HttpClient","i2","ErrorHandlerService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jdzea\\Desktop\\Atom Challenge\\solution\\frontend\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ErrorHandlerService } from './error-handler.service';\r\nimport { ApiResponse } from '../types/response-api.type';\r\nimport { Task } from '../types/task.type';\r\n\r\nexport const TASKS_KEY_NAME: string = 'tasks';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TasksService {\r\n    API_URL: string = environment.backend + '/' + environment.services.tasks;\r\n\r\n    constructor(\r\n        private _httpClient: HttpClient,\r\n        //   private _router: Router,\r\n        private _httpErrorHandler: ErrorHandlerService\r\n    ) { }\r\n\r\n    setTasks(newTask: Task): void {\r\n        // const tasks = this.getTasks();\r\n        localStorage.setItem(TASKS_KEY_NAME, \"tasks\");\r\n    }\r\n\r\n    removeAuthAccessToken(): void {\r\n        localStorage.removeItem(TASKS_KEY_NAME);\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return localStorage.getItem(TASKS_KEY_NAME);\r\n    }\r\n\r\n    validateTokenTime(): boolean {\r\n        const token = this.getToken();\r\n        if (!token) {\r\n            return false;\r\n        }\r\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n        const now = new Date().getTime() / 1000;\r\n        return tokenData.exp > now;\r\n    }\r\n\r\n    // getTasks(token: string): Observable<AuthResponse | ApiResponse> {\r\n    //     return this._httpClient.get<AuthResponse>(this.API_URL, {\r\n    //         headers: {\r\n    //             Authorization: `Bearer ${token}`,\r\n    //         },\r\n    //     }).pipe(\r\n    //         tap(this.setAuthAccessToken),\r\n    //         catchError(\r\n    //             error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n    //         )\r\n    //     );\r\n    //     return this._httpClient.get<AuthResponse>(this.API_URL)\r\n    //         .pipe(\r\n    //             tap(this.setAuthAccessToken),\r\n    //             catchError(\r\n    //                 error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n    //             )\r\n    //         );\r\n    // }\r\n\r\n    createTask(task: Task, token: string): Observable<Task | ApiResponse> {\r\n        console.log(task)\r\n        console.log(token)\r\n        return this._httpClient.post<Task>(this.API_URL, task, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        }).pipe(\r\n            tap(this.setTasks),\r\n            catchError(\r\n                error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n            )\r\n        );\r\n    }\r\n}"],"mappings":"AAEA,SAASA,UAAU,EAAcC,GAAG,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;;AAK1D,OAAO,MAAMC,cAAc,GAAW,OAAO;AAK7C,OAAM,MAAOC,YAAY;EAGrBC,YACYC,WAAuB;EAC/B;EACQC,iBAAsC;IAFtC,KAAAD,WAAW,GAAXA,WAAW;IAEX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAL7B,KAAAC,OAAO,GAAWN,WAAW,CAACO,OAAO,GAAG,GAAG,GAAGP,WAAW,CAACQ,QAAQ,CAACC,KAAK;EAMpE;EAEJC,QAAQA,CAACC,OAAa;IAClB;IACAC,YAAY,CAACC,OAAO,CAACZ,cAAc,EAAE,OAAO,CAAC;EACjD;EAEAa,qBAAqBA,CAAA;IACjBF,YAAY,CAACG,UAAU,CAACd,cAAc,CAAC;EAC3C;EAEAe,QAAQA,CAAA;IACJ,OAAOJ,YAAY,CAACK,OAAO,CAAChB,cAAc,CAAC;EAC/C;EAEAiB,iBAAiBA,CAAA;IACb,MAAMC,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,IAAI,CAACG,KAAK,EAAE;MACR,OAAO,KAAK;;IAEhB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI;IACvC,OAAOP,SAAS,CAACQ,GAAG,GAAGH,GAAG;EAC9B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAI,UAAUA,CAACC,IAAU,EAAEX,KAAa;IAChCY,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBC,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;IAClB,OAAO,IAAI,CAACf,WAAW,CAAC6B,IAAI,CAAO,IAAI,CAAC3B,OAAO,EAAEwB,IAAI,EAAE;MACnDI,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUhB,KAAK;;KAErC,CAAC,CAACiB,IAAI,CACHrC,GAAG,CAAC,IAAI,CAACW,QAAQ,CAAC,EAClBZ,UAAU,CACNuC,KAAK,IAAI,IAAI,CAAChC,iBAAiB,CAACiC,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACL;;;uBAjESnC,YAAY,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAZ1C,YAAY;MAAA2C,OAAA,EAAZ3C,YAAY,CAAA4C,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}