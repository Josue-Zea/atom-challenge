{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error-handler.service\";\nexport const TASKS_KEY_NAME = 'tasks';\nexport class TasksService {\n  constructor(_httpClient,\n  //   private _router: Router,\n  _httpErrorHandler) {\n    this._httpClient = _httpClient;\n    this._httpErrorHandler = _httpErrorHandler;\n    this.API_URL = environment.backend + '/' + environment.services.tasks;\n  }\n  setTasks(tasks) {\n    // const tasks = this.getTasks();\n    localStorage.setItem(TASKS_KEY_NAME, \"tasks\");\n  }\n  removeAuthAccessToken() {\n    localStorage.removeItem(TASKS_KEY_NAME);\n  }\n  getToken() {\n    return localStorage.getItem(TASKS_KEY_NAME);\n  }\n  validateTokenTime() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const now = new Date().getTime() / 1000;\n    return tokenData.exp > now;\n  }\n  getTasks(token) {\n    return this._httpClient.get(this.API_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).pipe(tap(this.setTasks), catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  createTask(task, token) {\n    return this._httpClient.post(this.API_URL, task, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).pipe(tap(task => this.setTasks([task])), catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  deleteTask(taskId, token) {\n    return this._httpClient.delete(`${this.API_URL}/${taskId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).pipe(\n    // tap((task) => this.setTasks([task])),\n    catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  static {\n    this.ɵfac = function TasksService_Factory(t) {\n      return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TasksService,\n      factory: TasksService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","tap","environment","TASKS_KEY_NAME","TasksService","constructor","_httpClient","_httpErrorHandler","API_URL","backend","services","tasks","setTasks","localStorage","setItem","removeAuthAccessToken","removeItem","getToken","getItem","validateTokenTime","token","tokenData","JSON","parse","atob","split","now","Date","getTime","exp","getTasks","get","headers","Authorization","pipe","error","handleErrorHttpRequest","createTask","task","post","deleteTask","taskId","delete","i0","ɵɵinject","i1","HttpClient","i2","ErrorHandlerService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jdzea\\Desktop\\Atom Challenge\\solution\\frontend\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ErrorHandlerService } from './error-handler.service';\r\nimport { ApiResponse } from '../types/response-api.type';\r\nimport { Task } from '../types/task.type';\r\nimport { MessageResponse } from '../types/message.type';\r\n\r\nexport const TASKS_KEY_NAME: string = 'tasks';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TasksService {\r\n    API_URL: string = environment.backend + '/' + environment.services.tasks;\r\n\r\n    constructor(\r\n        private _httpClient: HttpClient,\r\n        //   private _router: Router,\r\n        private _httpErrorHandler: ErrorHandlerService\r\n    ) { }\r\n\r\n    setTasks(tasks: Task[]): void {\r\n        // const tasks = this.getTasks();\r\n        localStorage.setItem(TASKS_KEY_NAME, \"tasks\");\r\n    }\r\n\r\n    removeAuthAccessToken(): void {\r\n        localStorage.removeItem(TASKS_KEY_NAME);\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return localStorage.getItem(TASKS_KEY_NAME);\r\n    }\r\n\r\n    validateTokenTime(): boolean {\r\n        const token = this.getToken();\r\n        if (!token) {\r\n            return false;\r\n        }\r\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n        const now = new Date().getTime() / 1000;\r\n        return tokenData.exp > now;\r\n    }\r\n\r\n    getTasks(token: string): Observable<Task[] | ApiResponse> {\r\n        return this._httpClient.get<Task[]>(this.API_URL, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        }).pipe(\r\n            tap(this.setTasks),\r\n            catchError(\r\n                error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n            )\r\n        );\r\n    }\r\n\r\n    createTask(task: Task, token: string): Observable<Task | ApiResponse> {\r\n        return this._httpClient.post<Task>(this.API_URL, task, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        }).pipe(\r\n            tap((task) => this.setTasks([task])),\r\n            catchError(\r\n                error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n            )\r\n        );\r\n    }\r\n\r\n    deleteTask(taskId: string, token: string): Observable<MessageResponse | ApiResponse> {\r\n        return this._httpClient.delete<MessageResponse>(`${this.API_URL}/${taskId}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        }).pipe(\r\n            // tap((task) => this.setTasks([task])),\r\n            catchError(\r\n                error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n            )\r\n        );\r\n    }\r\n}"],"mappings":"AAEA,SAASA,UAAU,EAAcC,GAAG,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;;AAM1D,OAAO,MAAMC,cAAc,GAAW,OAAO;AAK7C,OAAM,MAAOC,YAAY;EAGrBC,YACYC,WAAuB;EAC/B;EACQC,iBAAsC;IAFtC,KAAAD,WAAW,GAAXA,WAAW;IAEX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAL7B,KAAAC,OAAO,GAAWN,WAAW,CAACO,OAAO,GAAG,GAAG,GAAGP,WAAW,CAACQ,QAAQ,CAACC,KAAK;EAMpE;EAEJC,QAAQA,CAACD,KAAa;IAClB;IACAE,YAAY,CAACC,OAAO,CAACX,cAAc,EAAE,OAAO,CAAC;EACjD;EAEAY,qBAAqBA,CAAA;IACjBF,YAAY,CAACG,UAAU,CAACb,cAAc,CAAC;EAC3C;EAEAc,QAAQA,CAAA;IACJ,OAAOJ,YAAY,CAACK,OAAO,CAACf,cAAc,CAAC;EAC/C;EAEAgB,iBAAiBA,CAAA;IACb,MAAMC,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,IAAI,CAACG,KAAK,EAAE;MACR,OAAO,KAAK;;IAEhB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI;IACvC,OAAOP,SAAS,CAACQ,GAAG,GAAGH,GAAG;EAC9B;EAEAI,QAAQA,CAACV,KAAa;IAClB,OAAO,IAAI,CAACd,WAAW,CAACyB,GAAG,CAAS,IAAI,CAACvB,OAAO,EAAE;MAC9CwB,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUb,KAAK;;KAErC,CAAC,CAACc,IAAI,CACHjC,GAAG,CAAC,IAAI,CAACW,QAAQ,CAAC,EAClBZ,UAAU,CACNmC,KAAK,IAAI,IAAI,CAAC5B,iBAAiB,CAAC6B,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACL;EAEAE,UAAUA,CAACC,IAAU,EAAElB,KAAa;IAChC,OAAO,IAAI,CAACd,WAAW,CAACiC,IAAI,CAAO,IAAI,CAAC/B,OAAO,EAAE8B,IAAI,EAAE;MACnDN,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUb,KAAK;;KAErC,CAAC,CAACc,IAAI,CACHjC,GAAG,CAAEqC,IAAI,IAAK,IAAI,CAAC1B,QAAQ,CAAC,CAAC0B,IAAI,CAAC,CAAC,CAAC,EACpCtC,UAAU,CACNmC,KAAK,IAAI,IAAI,CAAC5B,iBAAiB,CAAC6B,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACL;EAEAK,UAAUA,CAACC,MAAc,EAAErB,KAAa;IACpC,OAAO,IAAI,CAACd,WAAW,CAACoC,MAAM,CAAkB,GAAG,IAAI,CAAClC,OAAO,IAAIiC,MAAM,EAAE,EAAE;MACzET,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUb,KAAK;;KAErC,CAAC,CAACc,IAAI;IACH;IACAlC,UAAU,CACNmC,KAAK,IAAI,IAAI,CAAC5B,iBAAiB,CAAC6B,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACL;;;uBArES/B,YAAY,EAAAuC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAZ5C,YAAY;MAAA6C,OAAA,EAAZ7C,YAAY,CAAA8C,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}