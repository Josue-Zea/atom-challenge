{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { CONSTANTS } from 'src/app/app.module';\nimport * as i0 from \"@angular/core\";\nexport class ErrorHandlerService {\n  constructor(_constants) {\n    this._constants = _constants;\n  }\n  handleErrorHttpRequest(error) {\n    let errorMessage = '';\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = this._constants.http.error0;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      if (error.status === 400) {\n        errorMessage = this._constants.http.error400;\n      }\n      if (error.status === 404) {\n        errorMessage = this._constants.http.error404;\n      }\n      if (error.status === 500) {\n        errorMessage = this._constants.http.error500;\n      }\n      if (error.status === 401) {\n        errorMessage = this._constants.http.error401;\n      }\n      if (error.status === 400) {\n        errorMessage = error.error.errors ? error.error.errors.join('\\n') : this._constants.http.error400;\n      }\n    }\n    const response = {\n      status: error.status,\n      message: error.message\n    };\n    return new Observable(observer => {\n      observer.next(response);\n      observer.complete();\n    });\n  }\n  static {\n    this.ɵfac = function ErrorHandlerService_Factory(t) {\n      return new (t || ErrorHandlerService)(i0.ɵɵinject(CONSTANTS));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorHandlerService,\n      factory: ErrorHandlerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","CONSTANTS","ErrorHandlerService","constructor","_constants","handleErrorHttpRequest","error","errorMessage","status","http","error0","error400","error404","error500","error401","errors","join","response","message","observer","next","complete","i0","ɵɵinject","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jdzea\\Desktop\\Atom Challenge\\solution\\frontend\\src\\app\\services\\error-handler.service.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { CONSTANTS } from 'src/app/app.module';\nimport { ApiResponse } from '../types/response-api.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService {\n\n  constructor(\n    @Inject(CONSTANTS) private _constants: any\n  ) { }\n\n  handleErrorHttpRequest(error: HttpErrorResponse): Observable<ApiResponse> {\n    let errorMessage = '';\n\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = this._constants.http.error0;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      if (error.status === 400) {\n        errorMessage = this._constants.http.error400;\n      }\n      \n      if (error.status === 404) {\n        errorMessage = this._constants.http.error404;\n      }\n\n      if (error.status === 500) {\n        errorMessage = this._constants.http.error500;\n      }\n\n      if (error.status === 401) {\n        errorMessage = this._constants.http.error401;\n      }\n\n      if (error.status === 400) {\n        errorMessage = error.error.errors ?\n          error.error.errors.join('\\n') :\n          this._constants.http.error400;\n      }\n    }\n\n    const response: ApiResponse = {\n      status: error.status,\n      message: error.message\n    }\n\n    return new Observable<ApiResponse>(observer => {\n      observer.next(response);\n      observer.complete();\n    });\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAY,MAAM;AACrC,SAASC,SAAS,QAAQ,oBAAoB;;AAM9C,OAAM,MAAOC,mBAAmB;EAE9BC,YAC6BC,UAAe;IAAf,KAAAA,UAAU,GAAVA,UAAU;EACnC;EAEJC,sBAAsBA,CAACC,KAAwB;IAC7C,IAAIC,YAAY,GAAG,EAAE;IAErB,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB;MACAD,YAAY,GAAG,IAAI,CAACH,UAAU,CAACK,IAAI,CAACC,MAAM;KAC3C,MAAM;MACL;MACA;MACA,IAAIJ,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,IAAI,CAACH,UAAU,CAACK,IAAI,CAACE,QAAQ;;MAG9C,IAAIL,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,IAAI,CAACH,UAAU,CAACK,IAAI,CAACG,QAAQ;;MAG9C,IAAIN,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,IAAI,CAACH,UAAU,CAACK,IAAI,CAACI,QAAQ;;MAG9C,IAAIP,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,IAAI,CAACH,UAAU,CAACK,IAAI,CAACK,QAAQ;;MAG9C,IAAIR,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACS,MAAM,GAC/BT,KAAK,CAACA,KAAK,CAACS,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,GAC7B,IAAI,CAACZ,UAAU,CAACK,IAAI,CAACE,QAAQ;;;IAInC,MAAMM,QAAQ,GAAgB;MAC5BT,MAAM,EAAEF,KAAK,CAACE,MAAM;MACpBU,OAAO,EAAEZ,KAAK,CAACY;KAChB;IAED,OAAO,IAAIlB,UAAU,CAAcmB,QAAQ,IAAG;MAC5CA,QAAQ,CAACC,IAAI,CAACH,QAAQ,CAAC;MACvBE,QAAQ,CAACE,QAAQ,EAAE;IACrB,CAAC,CAAC;EACJ;;;uBA/CWnB,mBAAmB,EAAAoB,EAAA,CAAAC,QAAA,CAGpBtB,SAAS;IAAA;EAAA;;;aAHRC,mBAAmB;MAAAsB,OAAA,EAAnBtB,mBAAmB,CAAAuB,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}