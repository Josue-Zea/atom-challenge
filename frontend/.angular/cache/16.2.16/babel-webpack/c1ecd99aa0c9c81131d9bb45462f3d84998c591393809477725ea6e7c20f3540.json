{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { SmallIconAllert } from '../alerts/alerts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error-handler.service\";\nexport const AUTH_KEY_NAME = 'authAccessToken';\nexport class AuthService {\n  constructor(_httpClient,\n  //   private _router: Router,\n  _httpErrorHandler) {\n    this._httpClient = _httpClient;\n    this._httpErrorHandler = _httpErrorHandler;\n    this.API_URL = environment.backend + '/' + environment.services.users;\n  }\n  setAuthAccessToken(authResponse) {\n    localStorage.setItem(AUTH_KEY_NAME, authResponse.token);\n  }\n  removeAuthAccessToken() {\n    localStorage.removeItem(AUTH_KEY_NAME);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_KEY_NAME);\n  }\n  validateTokenTime() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const now = new Date().getTime() / 1000;\n    return tokenData.exp > now;\n  }\n  login(authCredentials) {\n    return this._httpClient.get(this.API_URL + `/${authCredentials.email}`).pipe(tap(this.setAuthAccessToken), catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  register(authCredentials) {\n    return this._httpClient.post(this.API_URL, authCredentials).pipe(tap(this.setAuthAccessToken), catchError(error => this._httpErrorHandler.handleErrorHttpRequest(error)));\n  }\n  logout() {\n    this.removeAuthAccessToken();\n    SmallIconAllert('success', 'Sesión cerrada exitosamente');\n    //   this._router.navigate(['/login']);\n  }\n\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","tap","environment","SmallIconAllert","AUTH_KEY_NAME","AuthService","constructor","_httpClient","_httpErrorHandler","API_URL","backend","services","users","setAuthAccessToken","authResponse","localStorage","setItem","token","removeAuthAccessToken","removeItem","getToken","getItem","validateTokenTime","tokenData","JSON","parse","atob","split","now","Date","getTime","exp","login","authCredentials","get","email","pipe","error","handleErrorHttpRequest","register","post","logout","i0","ɵɵinject","i1","HttpClient","i2","ErrorHandlerService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jdzea\\Desktop\\Atom Challenge\\solution\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthResponse } from '../types/auth.response.type';\r\nimport { AuthCredentials } from '../types/auth.type';\r\nimport { ErrorHandlerService } from './error-handler.service';\r\nimport { ApiResponse } from '../types/response-api.type';\r\nimport { SmallIconAllert } from '../alerts/alerts';\r\n\r\nexport const AUTH_KEY_NAME: string = 'authAccessToken';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n    API_URL: string = environment.backend + '/' + environment.services.users;\r\n\r\n    constructor(\r\n        private _httpClient: HttpClient,\r\n        //   private _router: Router,\r\n        private _httpErrorHandler: ErrorHandlerService\r\n    ) { }\r\n\r\n    setAuthAccessToken(authResponse: AuthResponse): void {\r\n        localStorage.setItem(AUTH_KEY_NAME, authResponse.token);\r\n    }\r\n\r\n    removeAuthAccessToken(): void {\r\n        localStorage.removeItem(AUTH_KEY_NAME);\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return localStorage.getItem(AUTH_KEY_NAME);\r\n    }\r\n\r\n    validateTokenTime(): boolean {\r\n        const token = this.getToken();\r\n        if (!token) {\r\n            return false;\r\n        }\r\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n        const now = new Date().getTime() / 1000;\r\n        return tokenData.exp > now;\r\n    }\r\n\r\n    login(authCredentials: AuthCredentials): Observable<AuthResponse | ApiResponse> {\r\n        return this._httpClient.get<AuthResponse>(this.API_URL + `/${authCredentials.email}`)\r\n            .pipe(\r\n                tap(this.setAuthAccessToken),\r\n                catchError(\r\n                    error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n                )\r\n            );\r\n    }\r\n\r\n    register(authCredentials: AuthCredentials): Observable<AuthResponse | ApiResponse> {\r\n        return this._httpClient.post<AuthResponse>(this.API_URL, authCredentials)\r\n            .pipe(\r\n                tap(this.setAuthAccessToken),\r\n                catchError(\r\n                    error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n                )\r\n            );\r\n    }\r\n\r\n    logout(): void {\r\n        this.removeAuthAccessToken();\r\n        SmallIconAllert('success', 'Sesión cerrada exitosamente');\r\n        //   this._router.navigate(['/login']);\r\n    }\r\n}"],"mappings":"AAEA,SAASA,UAAU,EAAcC,GAAG,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;AAK1D,SAASC,eAAe,QAAQ,kBAAkB;;;;AAElD,OAAO,MAAMC,aAAa,GAAW,iBAAiB;AAKtD,OAAM,MAAOC,WAAW;EAGpBC,YACYC,WAAuB;EAC/B;EACQC,iBAAsC;IAFtC,KAAAD,WAAW,GAAXA,WAAW;IAEX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAL7B,KAAAC,OAAO,GAAWP,WAAW,CAACQ,OAAO,GAAG,GAAG,GAAGR,WAAW,CAACS,QAAQ,CAACC,KAAK;EAMpE;EAEJC,kBAAkBA,CAACC,YAA0B;IACzCC,YAAY,CAACC,OAAO,CAACZ,aAAa,EAAEU,YAAY,CAACG,KAAK,CAAC;EAC3D;EAEAC,qBAAqBA,CAAA;IACjBH,YAAY,CAACI,UAAU,CAACf,aAAa,CAAC;EAC1C;EAEAgB,QAAQA,CAAA;IACJ,OAAOL,YAAY,CAACM,OAAO,CAACjB,aAAa,CAAC;EAC9C;EAEAkB,iBAAiBA,CAAA;IACb,MAAML,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAI,CAACH,KAAK,EAAE;MACR,OAAO,KAAK;;IAEhB,MAAMM,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI;IACvC,OAAOP,SAAS,CAACQ,GAAG,GAAGH,GAAG;EAC9B;EAEAI,KAAKA,CAACC,eAAgC;IAClC,OAAO,IAAI,CAAC1B,WAAW,CAAC2B,GAAG,CAAe,IAAI,CAACzB,OAAO,GAAG,IAAIwB,eAAe,CAACE,KAAK,EAAE,CAAC,CAChFC,IAAI,CACDnC,GAAG,CAAC,IAAI,CAACY,kBAAkB,CAAC,EAC5Bb,UAAU,CACNqC,KAAK,IAAI,IAAI,CAAC7B,iBAAiB,CAAC8B,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACT;EAEAE,QAAQA,CAACN,eAAgC;IACrC,OAAO,IAAI,CAAC1B,WAAW,CAACiC,IAAI,CAAe,IAAI,CAAC/B,OAAO,EAAEwB,eAAe,CAAC,CACpEG,IAAI,CACDnC,GAAG,CAAC,IAAI,CAACY,kBAAkB,CAAC,EAC5Bb,UAAU,CACNqC,KAAK,IAAI,IAAI,CAAC7B,iBAAiB,CAAC8B,sBAAsB,CAACD,KAAK,CAAC,CAChE,CACJ;EACT;EAEAI,MAAMA,CAAA;IACF,IAAI,CAACvB,qBAAqB,EAAE;IAC5Bf,eAAe,CAAC,SAAS,EAAE,6BAA6B,CAAC;IACzD;EACJ;;;;uBAvDSE,WAAW,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAX1C,WAAW;MAAA2C,OAAA,EAAX3C,WAAW,CAAA4C,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}