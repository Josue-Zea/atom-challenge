{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const AUTH_KEY_NAME = 'authAccessToken';\nexport class AuthService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.API_URL = environment.backend + '/' + environment.services.users;\n  }\n  setAuthAccessToken(authResponse) {\n    localStorage.setItem(AUTH_KEY_NAME, authResponse.token);\n  }\n  removeAuthAccessToken() {\n    localStorage.removeItem(AUTH_KEY_NAME);\n  }\n  getToken() {\n    return localStorage.getItem(AUTH_KEY_NAME);\n  }\n  validateTokenTime() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const now = new Date().getTime() / 1000;\n    return tokenData.exp > now;\n  }\n  login(authCredentials) {\n    return this._httpClient.get(this.API_URL + `/${authCredentials.email}`).pipe(tap(this.setAuthAccessToken));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","environment","AUTH_KEY_NAME","AuthService","constructor","_httpClient","API_URL","backend","services","users","setAuthAccessToken","authResponse","localStorage","setItem","token","removeAuthAccessToken","removeItem","getToken","getItem","validateTokenTime","tokenData","JSON","parse","atob","split","now","Date","getTime","exp","login","authCredentials","get","email","pipe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jdzea\\Desktop\\Atom Challenge\\solution\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthResponse } from '../types/auth.response.type';\r\nimport { AuthCredentials } from '../types/auth.type';\r\n\r\nexport const AUTH_KEY_NAME: string = 'authAccessToken';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n    API_URL: string = environment.backend + '/' + environment.services.users;\r\n\r\n    constructor(\r\n      private _httpClient: HttpClient,\r\n    //   private _router: Router,\r\n    //   private _dialogService: DialogService,\r\n    //   private _httpErrorHandler: ErrorHandlerService\r\n    ) { }\r\n  \r\n    setAuthAccessToken(authResponse: AuthResponse): void {\r\n      localStorage.setItem(AUTH_KEY_NAME, authResponse.token);\r\n    }\r\n  \r\n    removeAuthAccessToken(): void {\r\n      localStorage.removeItem(AUTH_KEY_NAME);\r\n    }\r\n  \r\n    getToken(): string | null {\r\n      return localStorage.getItem(AUTH_KEY_NAME);\r\n    }\r\n  \r\n    validateTokenTime(): boolean {\r\n      const token = this.getToken();\r\n      if (!token) {\r\n        return false;\r\n      }\r\n      const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n      const now = new Date().getTime() / 1000;\r\n      return tokenData.exp > now;\r\n    }\r\n  \r\n    login(authCredentials: AuthCredentials): Observable<AuthResponse> {\r\n      return this._httpClient.get<AuthResponse>(this.API_URL + `/${authCredentials.email}`)\r\n      .pipe(\r\n        tap(this.setAuthAccessToken),\r\n        // catchError(\r\n        //     error => this._httpErrorHandler.handleErrorHttpRequest(error)\r\n        // )\r\n      );\r\n    }\r\n  \r\n    // logout(): void {\r\n    //   this.removeAuthAccessToken();\r\n    //   this._dialogService\r\n    //     .openDialog(\r\n    //       {\r\n    //         isOk: false,\r\n    //         title: 'Logout',\r\n    //         message: 'You have been logged out successfully',\r\n    //         data: {},\r\n    //         okText: '',\r\n    //         icon: DialogIcons.INFO\r\n    //       },\r\n    //     );\r\n    //   this._router.navigate(['/login']);\r\n    // }\r\n}"],"mappings":"AAEA,SAAiCA,GAAG,QAAQ,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAO,MAAMC,aAAa,GAAW,iBAAiB;AAKtD,OAAM,MAAOC,WAAW;EAGpBC,YACUC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IAHrB,KAAAC,OAAO,GAAWL,WAAW,CAACM,OAAO,GAAG,GAAG,GAAGN,WAAW,CAACO,QAAQ,CAACC,KAAK;EAOpE;EAEJC,kBAAkBA,CAACC,YAA0B;IAC3CC,YAAY,CAACC,OAAO,CAACX,aAAa,EAAES,YAAY,CAACG,KAAK,CAAC;EACzD;EAEAC,qBAAqBA,CAAA;IACnBH,YAAY,CAACI,UAAU,CAACd,aAAa,CAAC;EACxC;EAEAe,QAAQA,CAAA;IACN,OAAOL,YAAY,CAACM,OAAO,CAAChB,aAAa,CAAC;EAC5C;EAEAiB,iBAAiBA,CAAA;IACf,MAAML,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAI,CAACH,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,MAAMM,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI;IACvC,OAAOP,SAAS,CAACQ,GAAG,GAAGH,GAAG;EAC5B;EAEAI,KAAKA,CAACC,eAAgC;IACpC,OAAO,IAAI,CAACzB,WAAW,CAAC0B,GAAG,CAAe,IAAI,CAACzB,OAAO,GAAG,IAAIwB,eAAe,CAACE,KAAK,EAAE,CAAC,CACpFC,IAAI,CACHjC,GAAG,CAAC,IAAI,CAACU,kBAAkB,CAAC,CAI7B;EACH;;;uBAxCSP,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}